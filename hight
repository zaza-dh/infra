class Node:
    def __init__(self, info):
        self.info = info
        self.left = None
        self.right = None
        self.level = None

    def __str__(self):
        return str(self.info)


class BinarySearchTree:
    def __init__(self):
        self.root = None

    def create(self, val):

        if self.root is None:
            self.root = Node(val)
        else:
            current = self.root

            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break


# Enter your code here. Read input from STDIN. Print output to STDOUT
'''
class Node:
      def __init__(self,info): 
          self.info = info  
          self.left = None  
          self.right = None 


       // this is a node of the tree , which contains info as data, left , right
'''


def height(node):

    if node is None:
        return 0
    else:
        import pdb; pdb.set_trace()
        return max(height(node.left), height(node.right))


tree = BinarySearchTree()
t = int(input())

#for i in range(t):
#    inputi = int(input())
#   tree.create(inputi)
for i in [3, 5, 2, 1, 4, 6, 7]:
    tree.create(i)
print(tree.root.info)
print(height(tree.root))
